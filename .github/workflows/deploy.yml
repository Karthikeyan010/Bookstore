name: CI/CD for React + Spring Boot on GKE

on:
  push:
    branches:
      - main 

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REACT_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/bookstore-frontend
  SPRING_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/cart-service
  CATALOG_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service

jobs:
  build:
    name: Build & Deploy to GKE
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full repo checkout

      - name: 🛠 Debug - Verify Repository Structure
        run: |
          echo "Current Directory: $(pwd)"
          echo "List of files and directories:"
          ls -R  # Print all files & directories for debugging

      - name: 🔑 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      - name: 🛠 Install Google Cloud SDK & GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: 🛠 Configure Docker Authentication for GCR
        run: gcloud auth configure-docker gcr.io

      ### **Ensure the service account has correct permissions**
      - name: 🔑 Grant Artifact Registry Access to GitHub Actions
        run: |
          gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:${{ secrets.GCP_SA_EMAIL }}" \
            --role="roles/artifactregistry.writer"

      ### **Build Spring Boot JAR Files Before Dockerizing**
      - name: 🏗️ Build Spring Boot Application (Cart Service)
        run: |
          cd cart-service
          chmod +x mvnw  # Ensure wrapper is executable
          ./mvnw clean package -DskipTests  # Build the JAR file
          ls -l target/  # Verify JAR file exists
          cd ..

      - name: 🏗️ Build Spring Boot Application (Catalog Service)
        run: |
          cd catalog-service
          chmod +x mvnw  # Ensure wrapper is executable
          ./mvnw clean package -DskipTests  # Build the JAR file
          ls -l target/  # Verify JAR file exists
          cd ..

      ### **Build & Push Docker Images**
      - name: 🏗️ Build & Push React Frontend Docker Image
        run: |
          docker build -t $REACT_IMAGE:latest ./bookstore-frontend
          docker push $REACT_IMAGE:latest

      - name: 🏗️ Build & Push Spring Boot Backend (Cart Service) Docker Image
        run: |
          docker build -t $SPRING_IMAGE:latest --build-arg JAR_FILE=target/cart-service-0.0.1-SNAPSHOT.jar ./cart-service
          docker push $SPRING_IMAGE:latest

      - name: 🏗️ Build & Push Catalog Service Docker Image
        run: |
          docker build -t $CATALOG_IMAGE:latest --build-arg JAR_FILE=target/catalog-service-0.0.1-SNAPSHOT.jar ./catalog-service
          docker push $CATALOG_IMAGE:latest

      - name: 🔗 Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: 🔎 Verify Kubernetes Cluster Connection
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods --all-namespaces
          
      - name: 🚀 Deploy to GKE
        run: |
          kubectl apply -f k8s/  # Updated path to Kubernetes manifests
          kubectl rollout status deployment/bookstore-frontend
          kubectl rollout status deployment/cart-service
          kubectl rollout status deployment/catalog-service
