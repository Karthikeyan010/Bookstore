name: CI/CD for Catalog Service (Blue-Green Deployment)

on:
  push:
    branches:
      - main
    paths:
      - "catalog-service/**"
      - "k8s/catalog-rollout.yaml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_REPO: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service
  IMAGE_TAG: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔑 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠 Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🔗 Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: 🏗️ Build & Push New Image with SHA Tag
        run: |
          cd catalog-service
          chmod +x mvnw
          ./mvnw clean package
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          cd ..

      - name: 🔎 Get Latest Image Digest (SHA)
        id: image_digest
        run: |
          IMAGE_DIGEST=$(gcloud container images list-tags $IMAGE_REPO --format="value(digest)" --limit=1)
          echo "LATEST_IMAGE_SHA=$IMAGE_DIGEST" >> $GITHUB_ENV
          echo "✅ Latest image SHA: $IMAGE_DIGEST"

      - name: 🚀 Apply Rollout with Updated Image (Ensure Latest Image is Pulled)
        run: |
          kubectl apply -f k8s/catalog-rollout.yaml
          kubectl argo rollouts set image catalog-service catalog-service=$IMAGE_REPO@$LATEST_IMAGE_SHA
          echo "✅ New version deployed with digest."

      - name: 🔎 Verify That Kubernetes is Using the Latest Image
        run: |
          DEPLOYED_IMAGE=$(kubectl get pods -l app=catalog-service -o jsonpath="{.items[*].spec.containers[*].image}")
          echo "🛠 Running image: $DEPLOYED_IMAGE"
          if [[ "$DEPLOYED_IMAGE" != *"$LATEST_IMAGE_SHA"* ]]; then
            echo "❌ Kubernetes is not using the latest image!"
            exit 1
          fi
          echo "✅ Kubernetes is running the latest image."

      - name: 🔄 Restart Rollout to Force Image Pull
        run: |
          kubectl argo rollouts restart catalog-service
          echo "✅ Rollout restarted to force update."

      - name: 🔎 Watch Rollout Status Until Healthy
        run: |
          kubectl argo rollouts get rollout catalog-service --watch
          STATUS=$(kubectl argo rollouts get rollout catalog-service -o jsonpath='{.status.phase}')
          if [ "$STATUS" != "Healthy" ]; then
            echo "❌ Rollout failed!"
            exit 1
          fi
          echo "✅ Rollout is healthy."

      - name: 🔀 Promote New Version (Switch Traffic)
        run: |
          kubectl argo rollouts promote catalog-service
          echo "✅ New version is now live."

      - name: ❌ Rollback on Failure
        if: failure()
        run: |
          kubectl argo rollouts abort catalog-service
          echo "🔄 Rollback complete."
