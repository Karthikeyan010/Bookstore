name: CI/CD for Catalog Service (Blue-Green Deployment)

on:
  push:
    branches:
      - main
    paths:
      - "catalog-service/**"
      - "k8s/catalog-rollout.yaml"
      - "k8s/catalog-service-active.yaml"
      - "k8s/catalog-service-preview.yaml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_TAG: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîë Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üõ† Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: üõ† Install GKE Authentication Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: üõ† Configure Docker Authentication for GCR
        run: gcloud auth configure-docker gcr.io

      - name: üèóÔ∏è Build and Push Catalog Service Image
        run: |
          cd catalog-service
          chmod +x mvnw
          ./mvnw clean package
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          cd ..

      - name: üîó Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: üîó Verify GKE Cluster Connection
        run: |
          kubectl config current-context
          kubectl get nodes
          kubectl api-resources | grep rollouts || echo "‚ö†Ô∏è Rollout API not found!"

      - name: üõ† Install Argo Rollouts (Ensure CRDs Exist)
        run: |
          kubectl create namespace argo-rollouts --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
          kubectl rollout restart deployment argo-rollouts -n argo-rollouts
          sleep 10  # Wait for rollout controller to be ready
          kubectl get pods -n argo-rollouts

      - name: üõ† Install Argo Rollouts CLI
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
          echo "‚úÖ Argo Rollouts CLI installed."

      - name: üîé Check Argo Rollouts CLI Version
        run: |
          kubectl-argo-rollouts version

      - name: üöÄ Deploy New Version with Argo Rollouts
        run: |
          kubectl-argo-rollouts set image catalog-service catalog-service=$IMAGE_TAG
          echo "‚úÖ New version deployed in preview mode."

      - name: üîé Wait for Rollout Health Check
        run: |
          echo "‚è≥ Waiting for new preview ReplicaSet to become healthy..."
          TIMEOUT=300  # Maximum wait time in seconds
          ELAPSED=0

          # Extract the preview replicaset hash from the rollout JSON
          PREVIEW_HASH=$(kubectl get rollout catalog-service -o json | jq -r '.status.blueGreen.previewSelector')
          if [[ -z "$PREVIEW_HASH" || "$PREVIEW_HASH" == "null" ]]; then
              echo "‚ùå Failed to get the preview replicaset hash. Exiting..."
              exit 1
          fi

          # Construct the ReplicaSet name (assuming the replicaset is named with the prefix and hash)
          REPLICA_SET_NAME="catalog-service-${PREVIEW_HASH}"
          echo "üîé Watching ReplicaSet: $REPLICA_SET_NAME"

          # Loop until the ReplicaSet's ready replicas equal its desired replicas
          while [[ "$ELAPSED" -lt "$TIMEOUT" ]]; do
              DESIRED=$(kubectl get replicaset "$REPLICA_SET_NAME" -o json | jq '.spec.replicas')
              READY=$(kubectl get replicaset "$REPLICA_SET_NAME" -o json | jq '.status.readyReplicas // 0')
              echo "‚è≥ ReplicaSet $REPLICA_SET_NAME: Desired=$DESIRED, Ready=$READY"
              
              # Check if ready equals desired (and desired is greater than 0)
              if [[ "$READY" -eq "$DESIRED" && "$DESIRED" -gt 0 ]]; then
                  echo "‚úÖ New preview ReplicaSet is healthy!"
                  exit 0
              fi
              
              sleep 10
              ELAPSED=$((ELAPSED + 10))
          done

          echo "‚ùå New preview ReplicaSet did not become healthy in time."
          exit 1

      - name: üîé Run Integration Tests on Preview Service (Actuator Health)
        run: |
          echo "Starting port-forward for catalog-service-preview on port 8080..."
          # Start port-forwarding in the background and capture its PID.
          kubectl port-forward svc/catalog-service-preview 8080:8080 &
          PF_PID=$!
          echo "Port-forward started with PID $PF_PID. Waiting 5 seconds for connection to establish..."
          sleep 5

          echo "Running actuator health test on preview service..."
          # Test the actuator health endpoint
          if curl --fail http://localhost:8080/actuator/health; then
            echo "‚úÖ Actuator endpoint is healthy!"
          else
            echo "‚ùå Actuator endpoint test failed!"
            kill $PF_PID
            exit 1
          fi

          # Clean up the port-forward process
          kill $PF_PID


      - name: üîÄ Promote Green to Active (Switch Traffic)
        run: |
          kubectl-argo-rollouts promote catalog-service
          echo "‚úÖ New version is now active."

      - name: ‚ùå Rollback on Failure
        if: failure()
        run: |
          kubectl-argo-rollouts abort catalog-service
          kubectl-argo-rollouts undo catalog-service
          echo "üîÑ Rollback complete."
