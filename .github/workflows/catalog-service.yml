name: CI/CD for Catalog Service (Blue-Green Deployment)

on:
  push:
    branches:
      - main
    paths:
      - "catalog-service/**"
      - "k8s/catalog-rollout.yaml"
      - "k8s/catalog-service-active.yaml"
      - "k8s/catalog-service-preview.yaml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_TAG: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔑 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠 Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🛠 Install GKE Authentication Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: 🛠 Configure Docker Authentication for GCR
        run: gcloud auth configure-docker gcr.io

      - name: 🏗️ Build and Push Catalog Service Image
        run: |
          cd catalog-service
          chmod +x mvnw
          ./mvnw clean package
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          cd ..

      - name: 🔗 Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: 🔗 Verify GKE Cluster Connection
        run: |
          kubectl config current-context
          kubectl get nodes
          kubectl api-resources | grep rollouts || echo "⚠️ Rollout API not found!"

      - name: 🛠 Install Argo Rollouts (Ensure CRDs Exist)
        run: |
          kubectl create namespace argo-rollouts --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
          kubectl rollout restart deployment argo-rollouts -n argo-rollouts
          sleep 10  # Wait for rollout controller to be ready
          kubectl get pods -n argo-rollouts

      - name: 🛠 Install Argo Rollouts CLI
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
          echo "✅ Argo Rollouts CLI installed."

      - name: 🔎 Check Argo Rollouts CLI Version
        run: |
          kubectl-argo-rollouts version

      - name: 🚀 Deploy New Version with Argo Rollouts
        run: |
          echo "⏳ Waiting for rollout to become healthy..."
          TIMEOUT=280  # Maximum wait time in seconds
          ELAPSED=0
          STATUS="Progressing"  # Default status at start

          # Debug: Print rollout details before checking status
          kubectl-argo-rollouts get rollout catalog-service -o yaml

          # Loop until rollout is Healthy or timeout is reached
          while [[ "$STATUS" != "Healthy" && "$ELAPSED" -lt "$TIMEOUT" ]]; do
            STATUS=$(kubectl-argo-rollouts get rollout catalog-service -o yaml | grep "phase:" | awk '{print $2}' || echo "Pending")

            echo "⏳ Current Rollout Status: $STATUS"
            
            if [[ "$STATUS" == "Healthy" ]]; then
              echo "✅ Rollout is healthy!"
              exit 0
            fi

            # Debug: Show full rollout details every 30s
            if (( ELAPSED % 30 == 0 )); then
              kubectl-argo-rollouts get rollout catalog-service -o yaml
            fi

            sleep 10
            ELAPSED=$((ELAPSED + 10))
          done

          echo "❌ Rollout did not become healthy in time. Rolling back..."
          exit 1


      - name: 🔀 Promote Green to Active (Switch Traffic)
        run: |
          kubectl-argo-rollouts promote catalog-service
          echo "✅ New version is now active."

      - name: ❌ Rollback on Failure
        if: failure()
        run: |
          kubectl-argo-rollouts abort catalog-service
          kubectl-argo-rollouts undo catalog-service
          echo "🔄 Rollback complete."
