name: CI/CD for Catalog Service (Blue-Green Deployment)

on:
  push:
    branches:
      - main
    paths:
      - "catalog-service/**"
      - "k8s/catalog-deployment-blue.yaml"
      - "k8s/catalog-deployment-green.yaml"
      - "k8s/catalog-service.yaml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  CATALOG_IMAGE_BLUE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service:v1
  CATALOG_IMAGE_GREEN: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service:v2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔑 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠 Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🛠 Install GKE Authentication Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: 🛠 Configure Docker Authentication for GCR
        run: gcloud auth configure-docker gcr.io

      ### **Build the JAR File Before Dockerizing**
      - name: 🏗️ Build Catalog Service JAR
        run: |
          cd catalog-service
          chmod +x mvnw  # Ensure wrapper is executable
          ./mvnw clean package 
          ls -l target/  # Verify JAR file exists
          cd ..

      ### **Build & Push Catalog Service (Green Version)**
      - name: 🏗️ Build & Push Catalog Service
        run: |
          docker build --build-arg JAR_FILE=target/catalog-service-0.0.1-SNAPSHOT.jar -t $CATALOG_IMAGE_GREEN ./catalog-service
          docker push $CATALOG_IMAGE_GREEN

      - name: 🔗 Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: 🔎 Verify Kubernetes Cluster Connection
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods --all-namespaces
          
      ### **Blue-Green Deployment for Catalog Service**
      - name: 🚀 Deploy Green Version
        run: |
          kubectl apply -f k8s/catalog-deployment-green.yaml
          kubectl rollout status deployment/catalog-service-green --timeout=120s
          echo "Green version deployed, now performing health check..."

      - name: ✅ Verify Green Deployment
        id: health-check
        run: |
          GREEN_HEALTH=$(kubectl get pod -l app=catalog-service,version=green -o jsonpath='{.items[0].status.containerStatuses[0].ready}')
          if [ "$GREEN_HEALTH" != "true" ]; then
            echo "❌ Green deployment failed, rolling back..."
            exit 1
          fi
        continue-on-error: true  # ✅ Allow pipeline to continue, so rollback can happen

      - name: 🔀 Switch Traffic to Green
        if: success()  # ✅ Runs only if all previous steps, including health check, succeeded
        run: |
          kubectl patch service catalog-service -p '{"spec": {"selector": {"app": "catalog-service", "version": "green"}}}'
          echo "✅ Traffic switched to green!"

      - name: 🧹 Cleanup Old Blue Deployment (Optional)
        if: success()  # ✅ Clean up only if Green is stable
        run: |
          kubectl delete deployment catalog-service-blue || true
          echo "🗑️ Old Blue version removed."

      ### **Rollback Logic in Case of Failure**
      - name: ❌ Rollback to Blue on Failure
        if: failure()  # ✅ Runs only if health check failed
        run: |
          kubectl patch service catalog-service -p '{"spec": {"selector": {"app": "catalog-service", "version": "blue"}}}'
          echo "🔄 Traffic reverted to blue!"
