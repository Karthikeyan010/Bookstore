name: CI/CD for Catalog Service (Blue-Green Deployment)

on:
  push:
    branches:
      - main
    paths:
      - "catalog-service/**"
      - "k8s/catalog-rollout.yaml"
      - "k8s/catalog-service-active.yaml"
      - "k8s/catalog-service-preview.yaml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_TAG: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔑 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠 Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🛠 Install GKE Authentication Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: 🛠 Configure Docker Authentication for GCR
        run: gcloud auth configure-docker gcr.io

      - name: 🏗️ Build and Push Catalog Service Image
        run: |
          cd catalog-service
          chmod +x mvnw
          ./mvnw clean package
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: 🔗 Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: 🚀 Deploy New Version with Argo Rollouts
        run: |
          kubectl apply -f k8s/catalog-rollout.yaml
          kubectl set image rollout/catalog-service catalog-service=$IMAGE_TAG
          echo "✅ New version deployed in preview mode."

      - name: 🔎 Wait for Rollout Health Check
        run: |
          kubectl argo rollouts get rollout catalog-service
          sleep 30  # Wait for pods to stabilize
          STATUS=$(kubectl argo rollouts get rollout catalog-service -o jsonpath='{.status.phase}')
          if [ "$STATUS" != "Progressing" ] && [ "$STATUS" != "Healthy" ]; then
            echo "❌ New version failed. Rolling back..."
            kubectl argo rollouts abort catalog-service
            exit 1
          fi
          echo "✅ New version passed health checks."

      - name: 🔀 Promote Green to Active (Switch Traffic)
        run: |
          kubectl argo rollouts promote catalog-service
          echo "✅ New version is now active."

      - name: ❌ Rollback on Failure
        if: failure()
        run: |
          kubectl argo rollouts abort catalog-service
          echo "🔄 Rollback complete."
