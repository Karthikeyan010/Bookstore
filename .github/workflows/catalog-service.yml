name: CI/CD for Catalog Service (Blue-Green Deployment)

on:
  push:
    branches:
      - main
    paths:
      - "catalog-service/**"
      - "k8s/catalog-deployment.yaml"
      - "k8s/catalog-service.yaml"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  CATALOG_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/catalog-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîë Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: üõ† Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: üõ† Install GKE Authentication Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: üõ† Configure Docker Authentication for GCR
        run: gcloud auth configure-docker gcr.io

      ### **Build the JAR File Before Dockerizing**
      - name: üèóÔ∏è Build Catalog Service JAR
        run: |
          cd catalog-service
          chmod +x mvnw  # Ensure wrapper is executable
          ./mvnw clean package 
          ls -l target/  # Verify JAR file exists
          cd ..

      ### **Determine Active Deployment**
      - name: üîç Detect Active Environment
        id: active-env
        run: |
          ACTIVE_VERSION=$(kubectl get service catalog-service -o jsonpath='{.spec.selector.version}')
          if [ "$ACTIVE_VERSION" == "blue" ]; then
            echo "TARGET_VERSION=green" >> $GITHUB_ENV
            echo "INACTIVE_VERSION=blue" >> $GITHUB_ENV
            echo "IMAGE_TAG=v2" >> $GITHUB_ENV
          else
            echo "TARGET_VERSION=blue" >> $GITHUB_ENV
            echo "INACTIVE_VERSION=green" >> $GITHUB_ENV
            echo "IMAGE_TAG=v3" >> $GITHUB_ENV
          fi

      ### **Build & Push the New Version**
      - name: üèóÔ∏è Build & Push Catalog Service Image
        run: |
          docker build --build-arg JAR_FILE=target/catalog-service-0.0.1-SNAPSHOT.jar -t $CATALOG_IMAGE:${{ env.IMAGE_TAG }} ./catalog-service
          docker push $CATALOG_IMAGE:${{ env.IMAGE_TAG }}

      - name: üîó Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: üîé Verify Kubernetes Cluster Connection
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods --all-namespaces

      ### **Deploy to Inactive Environment**
      - name: üöÄ Deploy New Version
        run: |
          sed "s/{{VERSION}}/${{ env.TARGET_VERSION }}/g; s|{{IMAGE}}|$CATALOG_IMAGE:${{ env.IMAGE_TAG }}|g" k8s/catalog-deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/catalog-service-${{ env.TARGET_VERSION }} --timeout=120s
          echo "‚úÖ New version deployed to ${{ env.TARGET_VERSION }}"

      ### **Verify Deployment**
      - name: ‚úÖ Health Check
        id: health-check
        run: |
          HEALTH_STATUS=$(kubectl get pod -l app=catalog-service,version=${{ env.TARGET_VERSION }} -o jsonpath='{.items[0].status.containerStatuses[0].ready}')
          if [ "$HEALTH_STATUS" != "true" ]; then
            echo "‚ùå Health check failed, rolling back..."
            exit 1
          fi

      ### **Switch Traffic to New Version**
      - name: üîÄ Switch Traffic
        if: success()
        run: |
          kubectl patch service catalog-service -p '{"spec": {"selector": {"app": "catalog-service", "version": "${{ env.TARGET_VERSION }}"}}}'
          echo "‚úÖ Traffic switched to ${{ env.TARGET_VERSION }}"

      ### **Cleanup Old Deployment**
      - name: üóëÔ∏è Cleanup Old Deployment
        if: success()
        run: |
          kubectl delete deployment catalog-service-${{ env.INACTIVE_VERSION }} || true
          echo "üóëÔ∏è Old ${{ env.INACTIVE_VERSION }} deployment removed."

      ### **Rollback Logic in Case of Failure**
      - name: ‚ùå Rollback to Old Version
        if: failure()
        run: |
          kubectl patch service catalog-service -p '{"spec": {"selector": {"app": "catalog-service", "version": "${{ env.INACTIVE_VERSION }}"}}}'
          echo "üîÑ Rolled back to ${{ env.INACTIVE_VERSION }}"
